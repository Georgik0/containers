STD
x = 32766
y = 32766
x == y =  1
*(x - 3) =  3
*(y + 1) =  -373323840
FT
x = 1
y = 1
x == y =  1
*(x - 3) =  4
*(y + 1) =  32766
Test constructors
cap: 0
len: 0
vector:

cap: 21
len: 21
vector: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

cap: 5
len: 5
vector: 35 35 35 35 35

cap: 10
len: 10
vector: 0 1 2 3 4 5 6 7 8 9

cap: 3
len: 3
vector: 2 3 4

cap: 10
len: 10
vector: 0 1 2 3 4 5 6 7 8 9

cap: 10
len: 10
vector: 0 1 2 3 4 5 6 7 8 9

[1;32mTest modifiers[0m

[1;32minsert()[0m
vector: 0 1 2 3 4 5 6 7 8 9

vector: 0 1 2 3 4 5

cap: 11
len: 11
vector: 1 1 1 1 1 35 1 1 1 1 1

cap: 1
len: 1
vector: 35

cap: 1
len: 1
vector: 35

cap: 20
len: 20
vector: 1 1 1 1 1 0 1 2 3 4 5 6 7 8 9 1 1 1 1 1

[1;32merase()[0m
#1
iterator = 6
cap: 9
len: 9
vector: 0 1 2 3 4 6 7 8 9

#2
iterator = 1
cap: 2
len: 2
vector: 1 2

#3
iterator = 2
cap: 2
len: 2
vector: 0 1

#4
iterator = 0
cap: 0
len: 0
vector:

#5
iterator = 9
cap: 1
len: 1
vector: 9

#6
iterator = 1
cap: 9
len: 9
vector: 1 2 3 4 5 6 7 8 9

#7
iterator = 0
cap: 10
len: 10
vector: 0 1 2 3 4 5 6 7 8 9

[1;32massign()[0m
cap: 5
len: 5
vector: 22 22 22 22 22

[1;32mNon-member functions[0m
#1
Info: a
cap: 0
len: 0
vector:

Info: b
cap: 0
len: 0
vector:

a == b    true

#2
Info: a
cap: 10
len: 10
vector: 0 0 0 0 0 0 0 0 0 0

Info: b
cap: 2
len: 2
vector: 0 0

a == b    false

#3
Info: a
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

Info: b
cap: 10
len: 10
vector: 2 2 2 2 2 2 2 2 2 2

a == b    false

#4
Info: a
cap: 5
len: 5
vector: 1 1 1 1 1

Info: b
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

a == b    false

#5
Info: a
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

Info: b
cap: 10
len: 10
vector: 2 2 2 2 2 2 2 2 2 2

a < b    true

#6
Info: a
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

Info: b
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

a <= b    true

#7
Info: a
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

Info: b
cap: 5
len: 5
vector: 1 1 1 1 1

a <= b    false

#8
Info: a
cap: 5
len: 5
vector: 1 1 1 1 1

Info: b
cap: 10
len: 10
vector: 1 1 1 1 1 1 1 1 1 1

a <= b    true


[1;32melement access[0m
Info: a
cap: 10
len: 10
vector: 0 1 2 3 4 5 6 7 8 9

at(0) = 0
at(5) = 5
[1;32m

Test insert in rb_tree
[0m[0;32m
#1
[0m-1   0   1   2   3   4   5   6   7   8   9   
[0;32m
#2
[0m-1   0   1   2   3   4   5   6   7   8   9   
[0;32m
#3
[0m-20   -19   -18   -17   -16   -15   -14   -13   -12   -11   -10   -9   -8   -7   -6   -5   -4   -3   -2   -1   0   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   
[0;32m
#4
[0m-10   -9   -8   -7   -6   -5   -4   -3   -2   -1   0   1   2   3   4   5   6   7   8   9   10   
[0;32m
#5
[0m-10   -9   -8   -7   -6   -5   -4   -2   -1   0   2   4   5   6   7   8   9   10   
[1;32m

Test erase from rb_tree
[0m[0;32m
#1
[0mBefore:   -1   0   1   2   3   4   5   6   7   8   9   10   
After:  -1   2   3   4   5   6   7   8   10   

[0;32m
#2
[0mBefore:   0   1   2   3   4   5   6   7   8   9   10   
After:  0   1   2   3   4   5   6   7   8   9   10   

[0;32m
#3
[0mBefore:   0   1   2   3   4   5   6   7   8   9   10   
After:  begin = 2;    2   3   4   5   6   7   8   9   10   

[0;32m
#4
[0mBefore:   0   1   2   3   4   5   6   7   8   9   10   
After:  10   

[0;32m
#4
[0mBefore:   0   1   2   3   4   5   6   7   8   9   10   
After:  begin == end

[1;32m

Map test []

[0m[0;32m#1
[0m0 0 0 0 0 0 0 0 0 0 0 
0 1 2 3 4 5 6 7 8 9 10       map size = 11

[0;32m#2
[0m1 5       map size = 2

[0;32m#3
[0m0 1 2 3 4 5 6 7 8 9 10 
0 1 2 3 4 5 6 7 8 9 10       map size = 11

[1;32m

Map test insert

[0m[0;32m#1
[0m0 1 2 3 4 5 6 7 8 9 10       map size = 11

[0;32m#2
[0m0 1 2 3 4 5 6 7 8 9 10       map size = 11

[1;32m

Map test erase

[0m[0;32m#1
[0mm[0] = 10   m[1] = 9   m[2] = 8   m[3] = 7   m[4] = 6   m[5] = 5   m[6] = 4   m[7] = 3   m[8] = 2   m[9] = 1   
m[0] = 10   m[1] = 9   m[2] = 8   m[3] = 7   m[4] = 0   m[5] = 5   m[6] = 4   m[7] = 3   m[8] = 2   m[9] = 1   result erase(4) = 1
0 1 2 3 4 5 6 7 8 9       map size = 10

[0;32m#2
[0mresult erase(4) = 1
0 1 2 3 5 6 7 8 9       map size = 9

[0;32m#3
[0m5 6 7 8 9       map size = 5

[1;32m

Map test find

[0m[0;32m#1
[0mit = m.find(2); *it = 8
m[0] = 10   m[1] = 9   m[2] = 8   m[3] = 7   m[4] = 6   m[5] = 5   m[6] = 4   m[7] = 3   m[8] = 2   m[9] = 1   
[1;32m

Map test count

[0m[0;32m#1
[0mm.count(2) = 1
m[0] = 10   m[1] = 9   m[2] = 8   m[3] = 7   m[4] = 6   m[5] = 5   m[6] = 4   m[7] = 3   m[8] = 2   m[9] = 1   
[0;32m#2
[0mm.count(2222) = 0
m[0] = 10   m[1] = 9   m[2] = 8   m[3] = 7   m[4] = 6   m[5] = 5   m[6] = 4   m[7] = 3   m[8] = 2   m[9] = 1   
[1;32m

Map test equal_range

[0m[0;32m#1
[0m(*p.first).first (*p.first).second: 1   1
(*p.second).first (*p.second).second: 2   2
m[1] = 1
[0;32m#2
[0m(*p.first).first (*p.first).second: 9   9
p.second == m.end()
m[9] = 9
[1;32m

Set test constructor

[0m[0;32m#1
[0msize = 0
empty = 1
max_size = 576460752303423487
begin == end

[1;32m

Set test erase, insert

[0m[0;32m#1
[0msize = 10
empty = 0
max_size = 576460752303423487
0 1 2 3 4 5 6 7 8 9 
size = 6
empty = 0
max_size = 576460752303423487
0 1 2 3 8 9 
[1;32m

Set test iterators

[0m[0;32m#1
[0msize = 10
empty = 0
max_size = 576460752303423487
0 1 2 3 4 5 6 7 8 9 
9 8 7 6 5 4 3 2 1 0 time = 0.001027
